---
layout: docs
---
<script>
  import Tabs from "$components/Tabs.svelte";
  import Tab from "$components/Tab.svelte";
</script>

# CacheFirst

## First added

Workbox

## About

An implementation of the [cache first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache%5Ffirst%5Ffalling%5Fback%5Fto%5Fnetwork) request strategy.

A cache first strategy is useful for assets that have been revisioned, such as URLs like "/styles/example.a8f5f1.css", since they can be cached for long periods of time.

If the network request fails, and there is no cache match, this will throw a `SerwistError` exception.

## Parameters

- `cacheName` — Cache name to store and retrieve requests. Defaults to Serwist's default cache names.
- `plugins` — [Plugins](/docs/serwist/runtime-caching/plugins) to use in conjunction with this caching strategy.
- `fetchOptions` — Options passed to [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796) `fetch()` calls made by this strategy.
- `matchOptions` — The [CacheQueryOptions](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions) passed to any `cache.match()` or `cache.put()` call made by this strategy.

## Usage

<Tabs id="usage-example" tabs={[["sw.ts", "sw-ts"]]}>
  <Tab id="sw-ts">

```typescript twoslash
import { CacheFirst, Serwist } from "serwist";

const serwist = new Serwist({
  runtimeCaching: [
    {
      matcher: ({ request }) => request.destination === "style",
      handler: new CacheFirst(),
    },
  ],
});
```

  </Tab>
</Tabs>

## More resources

Here is a list of resources you can read to learn more about `CacheFirst`:

- [Runtime caching](/docs/serwist/runtime-caching)
- [Using plugins](/docs/serwist/runtime-caching/plugins)
